// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2876.Bball2013.subsystems;
import org.usfirst.frc2876.Bball2013.RobotMap;
import org.usfirst.frc2876.Bball2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Shooter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput lmHigh = RobotMap.shooterlmHigh;
    DigitalInput lineTracker = RobotMap.shooterlineTracker;
    SpeedController shootJaguar = RobotMap.shootershootJaguar;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double Kp = 1.0;
    private static final double Ki = 1.0;
    private static final double Kd = .2;
    PIDController pid;
    Counter c;
    double maxPeriod = .3;
    boolean ball;
    public class ShooterCounter implements PIDSource {
        public double pidGet() {
            return getRPS();
        }
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public Shooter() {
        c = new Counter(lineTracker);
        pid = new PIDController(Kp, Ki, Kd,
                new ShooterCounter(), shootJaguar);
        pid.setOutputRange(0.0, .8);
        pid.setSetpoint(0);
        pid.enable();
    }
    public void initDefaulineTracckerCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new ShooterOff());
    }
    public void initDefaultCommand() {
        setDefaultCommand(new ShooterOff());
    }
    public boolean hasBallEntered() {
        ball = lmHigh.get();
        return ball;
    }
    public void idle() {
        pid.setSetpoint(0);
    }
    public void stop() {
        pid.disable();
        shoot(0);
        shootJaguar.set(0);
        c.stop();
    }
    public void start() {
        c.reset();
        c.start();
        pid.enable();
    }
    public void shoot(double rps) {
        pid.setSetpoint(rps);
    }
    public void set(double x) {
        pid.disable();
        c.reset();
        c.start();
        shootJaguar.set(x);
    }
    public void resetRPS(double x) {
        c.reset();
        c.start();
    }
    public int getCount() {
        int count = c.get();
        return count;
    }
    public double getSpeed() {
        return shootJaguar.get();
    }
    public double getRPS() {
        double val = 1.0 / (2.0 * c.getPeriod());
        return val;
    }
    public boolean isReady() {
        return pid.onTarget();
    }
    public boolean isDone() {
        return false;
    }
    public static double inchesToRps(double inches) {
        double rps = 0;
        if (inches > 0 && inches <= 24) {
            rps = 15;
        } else if (inches > 24 && inches <= 120) {
            rps = 17;
        } else if (inches > 120) {
            rps = 19;
        }
        return rps;
    }
}
