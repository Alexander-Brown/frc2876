// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc2876.Bball2013.subsystems;

import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.camera.AxisCamera;
import edu.wpi.first.wpilibj.camera.AxisCameraException;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.image.BinaryImage;
import edu.wpi.first.wpilibj.image.ColorImage;
import edu.wpi.first.wpilibj.image.CriteriaCollection;
import edu.wpi.first.wpilibj.image.NIVision;
import edu.wpi.first.wpilibj.image.NIVisionException;
import edu.wpi.first.wpilibj.image.ParticleAnalysisReport;
import org.usfirst.frc2876.Bball2013.Target;
import org.usfirst.frc2876.Bball2013.commands.*;

/**
 *
 */
public class CameraTarget extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        setDefaultCommand(new CameraIdle());



    }
    int rlow = 70;
    int glow = 40;
    int blow = 25;
    int ghigh = 255;
    int rhigh = 255;
    int bhigh = 255;
    int VIEW_ANGLE = 54;
    AxisCamera camera;
    CriteriaCollection cc;
    Preferences pfs = Preferences.getInstance();
    boolean filter_running = false;

    public CameraTarget() {
        //super("CameraTarget");

        camera = AxisCamera.getInstance();

        cc = new CriteriaCollection();
        cc.addCriteria(NIVision.MeasurementType.IMAQ_MT_AREA, 500, 65535, false);

        pfs.putInt("rlow", rlow);
        pfs.putInt("rhigh", rhigh);
        pfs.putInt("glow", glow);
        pfs.putInt("ghigh", ghigh);
        pfs.putInt("blow", blow);
        pfs.putInt("bhigh", bhigh);
        pfs.putInt("theta", VIEW_ANGLE);
        pfs.save();
        System.out.println("R=" + rlow + "," + rhigh
                + " G=" + glow + "," + ghigh
                + " B=" + blow + "," + bhigh);

    }

    private void analyzeImage(BinaryImage threshImage, BinaryImage filterImage) {

        try {
            Target[] targets = new Target[filterImage.getNumberParticles()];
            System.out.println("num particles " + targets.length);
            for (int i = 0; i < targets.length; i++) {
                targets[i] = new Target(filterImage.getParticleAnalysisReport(i), i,
                        threshImage, filterImage);
                targets[i].calcScores();
                if (targets[i].isValid(true)) {
                    targets[i].computeDistance(true);
                    System.out.println("Outer " + targets[i]);
                } else if (targets[i].isValid(false)) {
                    targets[i].computeDistance(false);
                    System.out.println("Center " + targets[i]);
                } else {
                    System.out.println("particle " + i + " is not valid");
                }
            }
        } catch (NIVisionException ex) {
            ex.printStackTrace();
        }

    }

    private void printParticleReports(BinaryImage img) {
        double pdelay = .1;
        try {
            ParticleAnalysisReport[] reports =
                    img.getOrderedParticleAnalysisReports();
            for (int i = 0; i < reports.length && i < 5; i++) {
                ParticleAnalysisReport r = reports[i];
                System.out.println("Particle(" + (i + 1) + "/" + reports.length
                        + ")");
                Timer.delay(pdelay);
                System.out.println(" left=" + r.boundingRectLeft
                        + " top=" + r.boundingRectTop
                        + " x=" + r.center_mass_x
                        + " y=" + r.center_mass_y);
                Timer.delay(pdelay);
            }
            System.out.println(img.getNumberParticles()
                    + "  " + Timer.getFPGATimestamp());
            Timer.delay(pdelay);
        } catch (NIVisionException ex) {
            ex.printStackTrace();
        }
    }

    public boolean isFilterRunning() {
        return filter_running;
    }
    int img_ctr = 0;
    int MAX_SAVE = 5;

    public void findTargets(boolean saveImage) {
        filter_running = true;
        try {
            if (camera.freshImage() == false) {
                filter_running = false;
                return;
            }

            rlow = pfs.getInt("rlow", 0);
            rhigh = pfs.getInt("rhigh", 0);
            glow = pfs.getInt("glow", 0);
            ghigh = pfs.getInt("ghigh", 0);
            blow = pfs.getInt("blow", 0);
            bhigh = pfs.getInt("bhigh", 0);
            VIEW_ANGLE = pfs.getInt("theta", 54);

            ColorImage image = camera.getImage();
            if (saveImage && img_ctr < MAX_SAVE) {
                image.write("/tmp/" + img_ctr + "_0raw-image.png");
            }

            BinaryImage thresholdImage = image.thresholdHSL(rlow, rhigh,
                    glow, ghigh, blow, bhigh);
            if (saveImage) {
                System.out.println("R=" + rlow + "," + rhigh
                        + " G=" + glow + "," + ghigh
                        + " B=" + blow + "," + bhigh);
            }
            if (saveImage && img_ctr < MAX_SAVE && img_ctr < 5) {
                thresholdImage.write("/tmp/" + img_ctr + "1thresh-image.png");
            }
            // fill in occluded rectangles
            BinaryImage convexHullImage = thresholdImage.convexHull(false);
            if (saveImage && img_ctr < MAX_SAVE) {
                convexHullImage.write("/tmp/" + img_ctr + "3convex-image.png");
            }
            // find filled in rectangles
            BinaryImage filteredImage = convexHullImage.particleFilter(cc);
            if (saveImage && img_ctr < MAX_SAVE) {
                filteredImage.write("/tmp/" + img_ctr + "4filter-image.png");
            }
            if (saveImage) {
                printParticleReports(filteredImage);
            }
            //img_ctr++;
            analyzeImage(thresholdImage, filteredImage);

            filteredImage.free();
            convexHullImage.free();
            thresholdImage.free();
            image.free();
        } catch (AxisCameraException ex) {
            ex.printStackTrace();
        } catch (NIVisionException ex) {
            ex.printStackTrace();
        }
        filter_running = false;
    }

}
