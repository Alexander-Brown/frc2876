// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2876.FRC2876AerialAssault;
import edu.wpi.first.wpilibj.Joystick;
import org.usfirst.frc2876.FRC2876AerialAssault.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    public XboxController xBOXJoystick1;
    public XboxController xBOXJoystick2;
    
    int driveState;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        
        xBOXJoystick2 = new XboxController(2);
        xBOXJoystick1 = new XboxController(1);
        driveState = 1; //set to arcade drive on default
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("VisionIdle", new VisionIdle());
        SmartDashboard.putData("RaiseArm", new RaiseArm());
        SmartDashboard.putData("LowerArm", new LowerArm());
        SmartDashboard.putData("CollectBall", new CollectBall());
        SmartDashboard.putData("ReleaseBall", new ReleaseBall());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        SmartDashboard.putData("ArmIdle", new ArmIdle());
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public XboxController getXbox(){
        return xBOXJoystick1;
    }
    
    public boolean isStartPressed() {
         return xBOXJoystick1.getButton(8); //start
     }
     
     public boolean isBackPressed() {
         return xBOXJoystick1.getButton(7); //back
     }
    
    public double getXboxLeftY() {
        return xBOXJoystick1.getLeftY();
    }
    
    public double getXboxLeftX() {
        return xBOXJoystick1.getLeftX();
    }
    
    public double getXboxRightY() {
        return xBOXJoystick1.getRightY();
    }
    
    public double getXboxRightX() {
        return xBOXJoystick1.getRightX();
    }
    
     public double getXboxTrigger() {
        return xBOXJoystick1.getTriggers();
    }
    
    public int getDriveState() {
         if (isStartPressed())
            driveState = 0;
         else if (isBackPressed())
            driveState = 1;
        SmartDashboard.putNumber("Drive State", driveState);
        return driveState;
     }
}
