// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.RecycleRush2876;

import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGContainerSetDriveBackwards;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGDriveStraightOneSecond;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGRobotSet;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGStrafeLeft;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGStrafeRight;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGToteSet;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoCGToteSetDriveForwardHook;
import org.usfirst.frc2876.RecycleRush2876.commands.AutoDrive;
import org.usfirst.frc2876.RecycleRush2876.commands.AutonomousCommand;
import org.usfirst.frc2876.RecycleRush2876.commands.DriveToggleFieldOfView;
import org.usfirst.frc2876.RecycleRush2876.commands.DriveToggleSensitivity;
import org.usfirst.frc2876.RecycleRush2876.commands.DriveWithJoystick;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorBottom;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorDown;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorDownWithTrigger;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorIdle;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorNextSetpoint;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorPosition;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorPrevSetpoint;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorSetSetpoint;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorUp;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorUpWithTrigger;
import org.usfirst.frc2876.RecycleRush2876.commands.ResetGyro;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released  and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton start;
    public JoystickButton buttonA;
    public JoystickButton buttonB;
    public JoystickButton buttonX;
    public JoystickButton buttonY;
    public JoystickButton rightBumper;
    public JoystickButton leftBumper;
    public Joystick xboxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton lTrigger;
	public JoystickButton rTrigger;

	public OI() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxController = new Joystick(0);
        
        leftBumper = new JoystickButton(xboxController, 5);
        leftBumper.whenPressed(new ElevatorPrevSetpoint());
        rightBumper = new JoystickButton(xboxController, 6);
        rightBumper.whenPressed(new ElevatorNextSetpoint());
        buttonY = new JoystickButton(xboxController, 4);
        buttonY.whileHeld(new ResetGyro());
        buttonX = new JoystickButton(xboxController, 3);
        buttonX.whileHeld(new ElevatorIdle());
        buttonB = new JoystickButton(xboxController, 2);
        buttonB.whileHeld(new ElevatorIdle());
        buttonA = new JoystickButton(xboxController, 1);
        buttonA.whenPressed(new DriveToggleSensitivity());
        start = new JoystickButton(xboxController, 8);
        start.whenPressed(new DriveToggleFieldOfView());

	    
        // SmartDashboard Buttons

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		if (RobotMap.debugMode) {
			// SmartDashboard Buttons
			SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

			SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());

			SmartDashboard.putData("ElevatorIdle", new ElevatorIdle());

			SmartDashboard.putData("ElevatorUp", new ElevatorUp());

			SmartDashboard.putData("ElevatorDown", new ElevatorDown());

			SmartDashboard.putData("ElevatorUpWithTrigger", new ElevatorUpWithTrigger());

			SmartDashboard.putData("ElevatorDownWithTrigger", new ElevatorDownWithTrigger());

			SmartDashboard.putData("DriveToggleFieldOfView", new DriveToggleFieldOfView());

			SmartDashboard.putData("ResetGyro", new ResetGyro());

			SmartDashboard.putData("ElevatorPosition", new ElevatorPosition());

			SmartDashboard.putData("AutoDrive", new AutoDrive());

			SmartDashboard.putData("AutoCGRobotSet", new AutoCGRobotSet());

			SmartDashboard.putData("ElevatorBottom", new ElevatorBottom());

			SmartDashboard.putData("AutoCGToteSet", new AutoCGToteSet());

			SmartDashboard.putData("AutoCGToteSetDriveForwardHook", new AutoCGToteSetDriveForwardHook());

			SmartDashboard.putData("ElevatorNextSetpoint", new ElevatorNextSetpoint());

			SmartDashboard.putData("ElevatorPrevSetpoint", new ElevatorPrevSetpoint());

			SmartDashboard.putData("ElevatorSetSetpoint", new ElevatorSetSetpoint());

			SmartDashboard.putData("AutoCGDriveStraightOneSecond", new AutoCGDriveStraightOneSecond());

			SmartDashboard.putData("DriveToggleSensitivity", new DriveToggleSensitivity());

			SmartDashboard.putData("AutoCGContainerSetDriveBackwards", new AutoCGContainerSetDriveBackwards());

			SmartDashboard.putData("AutoCGStrafeRight", new AutoCGStrafeRight());

			SmartDashboard.putData("AutoCGStrafeLeft", new AutoCGStrafeLeft());
		}


	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXboxController() {
        return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

	public double getLeftX() { 
		return xboxController.getRawAxis(LEFT_X_AXIS);
	}
	public double getLeftY() { 
		return xboxController.getRawAxis(LEFT_Y_AXIS);
	}
	public double getRightX() { 
		return xboxController.getRawAxis(RIGHT_X_AXIS);
	}
	public double getLeftTrigger() {
		return xboxController.getRawAxis(LEFT_TRIGGER);
	}
	public double getRightTrigger() {
		return xboxController.getRawAxis(RIGHT_TRIGGER);
	}

	public static final int LEFT_X_AXIS = 0,
			LEFT_Y_AXIS = 1,
			LEFT_TRIGGER = 2,
			RIGHT_TRIGGER = 3,
			RIGHT_X_AXIS = 4,
			RIGHT_Y_AXIS = 5,
			DPAD_LR = 6;
}

