//Contributers:  Neil Patel, Maciej
//Started:  1/18/09
//Last Updated:  1/23/09
//BHS ROBOTIX TEAM

#include "WPILib.h"
#include <Dashboard.h>
#include <iostream.h>

using namespace std;

class RobotBeta1 : public SimpleRobot {
	//member variables
	
	public:
		//constructors
		RobotBeta1(void) :
			itsDrive(1,2),
			joystickUSB1(1),
			joystickUSB2(2),
			gyro(1)
		{
			printf("\n\nInitializing RobotBeta1...");
			GetWatchdog().SetExpiration(100);
			printf("Done\n\n");
		}
		
		//public methods
		void Autonomous(void);
		void OperatorControl(void);
	private:
		RobotDrive itsDrive;
		Joystick joystickUSB1;
		Joystick joystickUSB2;
		Gyro gyro;
		void driveStrait(long maxTime);
		void turn90Right();
		void resetGyro();
};


void RobotBeta1::Autonomous(void) {
	printf("\nStarting Autonomous...Trial 15\n");
	while(IsAutonomous()) {
		//drive in a square
		GetWatchdog().Feed();
		driveStrait(500);
		GetWatchdog().Feed();
		turn90Right();
		itsDrive.Drive(0, 0);
		GetWatchdog().Feed();
	}
	printf("\nEnd Autonomous Mode\n");	
}

void RobotBeta1::OperatorControl(void) {
	int slowDownProccessing = 0;
	printf("\nStart Operator Control...\n");
	
	gyro.Reset();
	float angle = gyro.GetAngle(); // get heading
	printf("1calibrate angle %f\n", angle);
	
	GetWatchdog().SetEnabled(true);
	while (IsOperatorControl())  {
		GetWatchdog().Feed();
		itsDrive.TankDrive(joystickUSB1, joystickUSB2);
		if ((slowDownProccessing % 5) == 0) {
			printf("\r\t\tGyro Angle:\t%f", gyro.GetAngle());
		}
		Wait(0.006);
	}
	printf("\nEnd Operator Control\n");
}
void RobotBeta1::driveStrait(long maxTime) {
	int slowDownProccessing = 0;
	long cTime = 0;
	
	resetGyro();
	float angle = 0;
	angle = gyro.GetAngle(); // get heading
	GetWatchdog().SetEnabled(true);
	
	
	while ((IsAutonomous()) && (cTime <= maxTime))  { 
		GetWatchdog().Feed();
		float angle = gyro.GetAngle(); // get heading
		if ((slowDownProccessing % 250) == 0) {
			printf("\n\t\tGyro Angle:  %f\t\t\tDrive Adj:  %f", gyro.GetAngle(), (angle * 0.03));
			cout << "\n\t\tTime:  "; cout << cTime; cout << "\t\t\tExit:  "; cout << maxTime; cout << "\n";
		}
		slowDownProccessing++; cTime++;
		itsDrive.Drive(-.5, (angle * 0.03));// turn to correct heading 
		Wait(0.004); 
	}
	itsDrive.Drive(0.0, 0.0);
}

void RobotBeta1::turn90Right(void) {
	float cGyroAngle = 0.0;
	const float maxAngle = 47.3;

	while((cGyroAngle <= maxAngle) && (IsAutonomous())) {
		cout << "Here\t\t"; cout << "Exit:  "; cout << (cGyroAngle <= maxAngle); cout << "\r";
		itsDrive.Drive(-.25, -1);
		Wait(0.006);
		GetWatchdog().Feed();
		cGyroAngle = gyro.GetAngle();
	}	
}

void RobotBeta1::resetGyro(void) {
	float angle = gyro.GetAngle();
	while (((int)angle) != 0) {
		gyro.Reset();
		GetWatchdog().Feed();
		angle = gyro.GetAngle();
		printf("3calibrate angle %f\n", angle);
		Wait(0.1);
	}	
}

START_ROBOT_CLASS(RobotBeta1);
