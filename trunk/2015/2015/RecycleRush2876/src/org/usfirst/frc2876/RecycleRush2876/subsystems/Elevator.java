// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.RecycleRush2876.subsystems;

import org.usfirst.frc2876.RecycleRush2876.Robot;
import org.usfirst.frc2876.RecycleRush2876.RobotMap;
import org.usfirst.frc2876.RecycleRush2876.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Elevator extends PIDSubsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogPotentiometer potentiometer = RobotMap.elevatorpotentiometer;
    SpeedController elevatorMotor = RobotMap.elevatorElevatorMotor;
    DigitalInput topLimit = RobotMap.elevatorTopLimit;
    DigitalInput bottomLimit = RobotMap.elevatorBottomLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private final double ELEVATOR_MAX_SPEED_UP = 0.8;
	private final double ELEVATOR_MAX_SPEED_DOWN = 0.4;
	public static final int STAGING_DIFF_FROM_BOTTOM = 422;
	public static final int ONE_TOTE_DIFF_FROM_STAGING = 486;
	public static final int TWO_TOTE_DIFF_FROM_ONE_TOTE = 641;
	public static final int TOP_DIFF_FROM_TWO_TOTE = 379;

	public static double BOTTOM = 885;
	public static double STAGING_HEIGHT = BOTTOM + STAGING_DIFF_FROM_BOTTOM;
	public static double ONE_TOTE_HIGH = STAGING_HEIGHT + ONE_TOTE_DIFF_FROM_STAGING;
	public static double TWO_TOTE_HIGH = ONE_TOTE_HIGH + TWO_TOTE_DIFF_FROM_ONE_TOTE;
	public static double TOP = TWO_TOTE_HIGH + TOP_DIFF_FROM_TWO_TOTE;
	private double setpointArray[] = {
			BOTTOM, 
			STAGING_HEIGHT,
			ONE_TOTE_HIGH,
			TWO_TOTE_HIGH,
			TOP
	};
	private int currentSetpointIndex = 0;

	// Initialize your subsystem here
	public Elevator() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Elevator", 0.008, 0.0, 0.008);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(true);
        LiveWindow.addActuator("Elevator", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
		SmartDashboard.putData("ElevatorPID", getPIDController());

		getPIDController().setOutputRange(-.3, .6);

		// Use these to get going:
		// setSetpoint() -  Sets where the PID controller should move the system
		//                  to
		// enable() - Enables the PID controller.

	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new ElevatorIdle());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		//setDefaultCommand(new MySpecialCommand());
	}

	protected double returnPIDInput() {
		// Return your input value for the PID loop
		// e.g. a sensor, like a potentiometer:
		// yourPot.getAverageVoltage() / kYourMaxVoltage;

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return potentiometer.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
	}

	protected void usePIDOutput(double output) {
		// Use output to drive your system, like a motor
		// e.g. yourMotor.set(output);
		SmartDashboard.putNumber("PID Output", output);
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        elevatorMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
		if (topMax() && output > 0) {
			motorOff();
		}
		if (bottomMax() && output < 0) {
			motorOff();
		}
	}

	public void motorUp() {
		elevatorMotor.set(.5);
	}

	public void motorOff() {
		elevatorMotor.set(0);
	}

	public void motorDown() {
		elevatorMotor.set(-.3);
	}

	public void motorTrigger(double up, double down) {
		if (topMax() && up > 0){
			motorOff();
			return;
		}
		if (bottomMax() && down >0) {
			motorOff();
			return;
		}
		if (up > 0 && down > 0) {
			motorOff();
			return;
		}
		if (up > 0) {
			elevatorMotor.set(Math.min(Math.pow(up , 2), ELEVATOR_MAX_SPEED_UP));
		}
		if (down > 0) {
			elevatorMotor.set(Math.max(0 - Math.pow(down, 2), 0 - ELEVATOR_MAX_SPEED_DOWN));
		}
	}

	public void motorRightTrigger() {
		elevatorMotor.set(Math.min(Math.pow(Robot.oi.getRightTrigger(), 2), ELEVATOR_MAX_SPEED_UP));
		SmartDashboard.putNumber("Right Trigger", Robot.oi.getRightTrigger());
	}

	public void motorLeftTrigger() {
		elevatorMotor.set(Math.max(0 - Math.pow(Robot.oi.getLeftTrigger(), 2), 0 - ELEVATOR_MAX_SPEED_DOWN));
		SmartDashboard.putNumber("Left Trigger", Robot.oi.getLeftTrigger());
	}

	public void enablePID(){
		enable();
	}

	public void disablePID(){
		disable();
	}

	public boolean topMax() {
		return !topLimit.get();  
	}

	public boolean bottomMax() {
		resetPotentiometerValues();
		return !bottomLimit.get();
	}

	public void updateDashboard() {
		SmartDashboard.putNumber("PID position", getPosition());
		SmartDashboard.putNumber("PID error", getPIDController().getError());
		SmartDashboard.putBoolean("PID Enabled", getPIDController().isEnable());
		SmartDashboard.putNumber("PID Setpoint", getSetpoint());
		SmartDashboard.putNumber("Elevator Motor", elevatorMotor.get());
		SmartDashboard.putNumber("Current Setpoint Index", currentSetpointIndex);
	}
	
	public static final int POTENTIOMETER_NOISE = 30;

	public void incrementSetpoint() {
//		int loop = currentSetpointIndex;
//		
//		// We increment to the next highest from the current position	
//		while (setpointArray[loop] <= potentiometer.get() + POTENTIOMETER_NOISE && loop < setpointArray.length - 1){
//			loop++;
//		}
//		currentSetpointIndex = loop;
//		setSetpoint(setpointArray[currentSetpointIndex]);

//		for (int i = setpointArray.length - 1; i >= 0; i--) {
		
		for (int i = 0; i < setpointArray.length; i++) {
			if (setpointArray[i] >= potentiometer.get() + POTENTIOMETER_NOISE) {
				setSetpoint(setpointArray[i]);
				break;
			}
		}
	}

	public void decrementSetpoint() {
//		for (int i = 0; i < setpointArray.length; i++) {
//			if (setpointArray[i] >= potentiometer.get() - POTENTIOMETER_NOISE) {
//				setSetpoint(setpointArray[Math.max(0, i-1)]);
//				break;
//			}
//		}
		
		for (int i = setpointArray.length - 1; i > 0; i--){
			if (setpointArray[i] < potentiometer.get() - POTENTIOMETER_NOISE){
				setSetpoint(setpointArray[i]);
				break;
			}
		}
	}
	
	public void resetPotentiometerValues(){
		BOTTOM = returnPIDInput();
		STAGING_HEIGHT = BOTTOM + STAGING_DIFF_FROM_BOTTOM;
		ONE_TOTE_HIGH = STAGING_HEIGHT + ONE_TOTE_DIFF_FROM_STAGING;
		TWO_TOTE_HIGH = ONE_TOTE_HIGH + TWO_TOTE_DIFF_FROM_ONE_TOTE;
		TOP = TWO_TOTE_HIGH + TOP_DIFF_FROM_TWO_TOTE;
	}
}

