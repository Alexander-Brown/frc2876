// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2876.RecycleRush2876;

import org.usfirst.frc2876.RecycleRush2876.commands.AutonomousCommand;
import org.usfirst.frc2876.RecycleRush2876.commands.AutonomousIdea;
import org.usfirst.frc2876.RecycleRush2876.commands.DriveWithJoystick;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorDown;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorIdle;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorToBottom;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorToPickup;
import org.usfirst.frc2876.RecycleRush2876.commands.ElevatorUp;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton start;
    public JoystickButton buttonA;
    public JoystickButton buttonB;
    public JoystickButton buttonX;
    public JoystickButton buttonY;
    public JoystickButton rightBumper;
    public JoystickButton leftBumper;
    public Joystick xboxController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xboxController = new Joystick(0);
        
        leftBumper = new JoystickButton(xboxController, 5);
        leftBumper.whileHeld(new ElevatorDown());
        rightBumper = new JoystickButton(xboxController, 6);
        rightBumper.whileHeld(new ElevatorUp());
//        buttonY = new JoystickButton(xboxController, 4);
//        buttonY.whileHeld(new ElevatorIdle());
//        buttonX = new JoystickButton(xboxController, 3);
//        buttonX.whileHeld(new ElevatorIdle());
//        buttonB = new JoystickButton(xboxController, 2);
//        buttonB.whileHeld(new ElevatorIdle());
//        buttonA = new JoystickButton(xboxController, 1);
//        buttonA.whileHeld(new ElevatorIdle());
//        start = new JoystickButton(xboxController, 8);
//        start.whenPressed(new ElevatorIdle());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("DriveWithJoystick", new DriveWithJoystick());

        SmartDashboard.putData("ElevatorIdle", new ElevatorIdle());

        SmartDashboard.putData("ElevatorUp", new ElevatorUp());

        SmartDashboard.putData("ElevatorDown", new ElevatorDown());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        // RobotBuilder doesn't work well for me on my computer.. so I just added these manually.
        buttonY = new JoystickButton(xboxController, 4);
        buttonY.whenPressed(new ElevatorToBottom());
        buttonX = new JoystickButton(xboxController, 3);
        buttonX.whenPressed(new ElevatorToPickup());
        SmartDashboard.putData("ElevatorToBottom", new ElevatorToBottom());
        SmartDashboard.putData("ElevatorToPickup", new ElevatorToPickup());

        // Test autonomous mode by putting a button on smartdashboard
        SmartDashboard.putData("AutonomousIdea", new AutonomousIdea());
        
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXboxController() {
        return xboxController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public double getLeftX() { 
    	return xboxController.getRawAxis(LEFT_X_AXIS);
    }
    public double getLeftY() { 
    	return xboxController.getRawAxis(LEFT_Y_AXIS);
    }
    public double getRightX() { 
    	return xboxController.getRawAxis(RIGHT_X_AXIS);
    }
    
    
    
    public static final int LEFT_X_AXIS = 0,
            LEFT_Y_AXIS = 1,
            TRIGGERS = 3,
            RIGHT_X_AXIS = 4,
            RIGHT_Y_AXIS = 5,
            DPAD_LR = 6;
}

