// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2876.FRC2876AerialAssault.subsystems;

import org.usfirst.frc2876.FRC2876AerialAssault.RobotMap;
import org.usfirst.frc2876.FRC2876AerialAssault.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2876.FRC2876AerialAssault.AnalogSonar;

/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Gyro gyro = RobotMap.driveTrainGyro;
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    SpeedController leftSpeedController = RobotMap.driveTrainLeftSpeedController;
    SpeedController rightSpeedController = RobotMap.driveTrainRightSpeedController;
    RobotDrive robotDrive21 = RobotMap.driveTrainRobotDrive21;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AnalogSonar leftSonar;
    public static AnalogSonar rightSonar;
    public static AnalogSonar frontSonar;

    GyroPID gyroPID = new GyroPID();
    boolean driveWithGain = true;
    private double now = Timer.getFPGATimestamp();
    private double last = now;

    
    public DriveTrain() {
        setDriveWithGain(true);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new Drive());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    public void tankDrive(double left, double right) {
        robotDrive21.tankDrive(left, right);
    }

    public void arcadeDrive(double throttle, double rotation) {
        robotDrive21.arcadeDrive(throttle, rotation);
//        now = Timer.getFPGATimestamp();
//        if (now - last > 1) {
//            if (throttle > .1) {
//                System.out.println("throttle " + throttle
//                        + " rotation " + rotation);
//            }
//        }
    }

    public void tankDriveGain(double left, double right) {
        // Adjust sensitivity of joysticks. When the joystick is barely 
        // pressed/moved send small output to motors. When joystick 
        // is press/moved alot send BIG output to motors.
        // y=a(x^3)+(1-a)x
        double a = .577;
        double ly = (a * (left * left * left)) + ((1 - a) * left);
        double ry = (a * (right * right * right)) + ((1 - a) * right);
        robotDrive21.tankDrive(ly, ry);

    }

    public void arcadeDriveGain(double throttle, double rot) {
        // Adjust sensitivity of joysticks. When the joystick is barely 
        // pressed/moved send small output to motors. When joystick 
        // is press/moved alot send BIG output to motors.
        // y=a(x^3)+(1-a)x
        double a = .577;
        double t = (a * (throttle * throttle * throttle)) + ((1 - a) * throttle);
        double d = (a * (rot * rot * rot)) + ((1 - a) * rot);
        robotDrive21.arcadeDrive(t, d);
//        now = Timer.getFPGATimestamp();
//        if (now - last > 1) {
//            if (throttle > .1) {
//                System.out.println("t " + t + " throttle " + throttle
//                        + " d " + d + " rot " + rot);
//            }
//        }
    }

    public void setDriveWithGain(boolean state) {
        driveWithGain = state;
        System.out.println("driveWithGain " + driveWithGain);
        SmartDashboard.putBoolean("driveWithGain", driveWithGain);
    }

    public void toggleDriveGain() {
        driveWithGain = !driveWithGain;
        System.out.println("driveWithGain " + driveWithGain);
        SmartDashboard.putBoolean("driveWithGain", driveWithGain);

    }

    public boolean isDriveGain() {
        return driveWithGain;
    }

    public double getHeading() {
        return gyro.getAngle();
    }

    public void resetEncoders() {
        leftEncoder.reset();
        rightEncoder.reset();
    }

    public void startEncoders() {
        leftEncoder.start();
        rightEncoder.start();
    }

    public void stopEncoders() {
        leftEncoder.stop();
        rightEncoder.stop();
    }

    public double getDistance() {
//        double formula = 0.020933333; //constant
        //double distance = 0, right = 0, left = 0;

        // right = rightEncoder.get() * formula;
        // distance = right;
        // left = leftEncoder.get() * formula;
        //distance = (right + left) / 2;
// formula = Sistance per pulse
//right and eft are variables to convert encoder output to the actual distance
//        DRIVE_ENCODER_PULSE_PER_ROT = PULSE_PER_ROTATION * GEAR_RATIO
//        Distance Per Pulse = ((Math.PI * 2 * DRIVE_WHEEL_RADIUS) / DRIVE_ENCODER_PULSE_PER_ROT)
//        PULSE_PER_ROTATION = 250
//      GEAR_RATIO = 12/5
//      DRIVE_WHEEL_RADIUS = 2
//
//      Drive encoder pulse per rotation = 250*(12/5) = 600
//      Distance per pulse = ((3.14*2*2)/ 600= 0.020933333
        return rightEncoder.getDistance();
    }

    public void updateDashboard() {
        SmartDashboard.putData("Left Encoder", leftEncoder);
        SmartDashboard.putData("Right Encoder", rightEncoder);
        SmartDashboard.putData("Gyro", gyro);
        if (gyroPID.isEnabled()) {
            SmartDashboard.putData("GyroPID", gyroPID.getPIDController());
        }
    }

    public void driveStraightStart() {
        gyroPID.start();
    }

    public void driveStraightStop() {
        gyroPID.stop();
    }

    private class GyroPID {

        private static final double gyroKp = 0.100;
        private static final double gyroKi = 0.000;
        private static final double gyroKd = 0.000;
        private PIDController gpid = new PIDController(gyroKp, gyroKi, gyroKd, gyro, new DrivePIDOutput());

        private class DrivePIDOutput implements PIDOutput {

            public void pidWrite(double output) {
                double base = .7;
                //System.out.println("gryopid output" + Utilities.rnd(output));
                printStatus();
                if (output > 0) {
                    //robotDrive2.tankDrive(base, base);
                    robotDrive21.tankDrive(output + base, base);
                } else if (output < 0) {
                    robotDrive21.tankDrive(base, output + base);
                } else {
                    robotDrive21.tankDrive(base, base);
                }
                //robotDrive2.tankDrive(base + output, base + output);
            }
        }

        public void GyroPID() {
            //gpid = new PIDController(1.0, 0, 0, gyro, new DrivePIDOutput());
            gpid.setOutputRange(-.2, .2);
            gpid.setPercentTolerance(5);
        }

        public PIDController getPIDController() {
            return gpid;
        }

        public void start() {
            gyro.reset();
            gpid.setSetpoint(0);
            gpid.enable();
        }

        public void stop() {
            gpid.disable();
        }

        public boolean isEnabled() {
            return gpid.isEnable();
        }

        public void printStatus() {
            now = Timer.getFPGATimestamp();
            if (now - last > 1) {
                System.out.println("gpid out: " + gpid.get()
                        + " error: " + gpid.getError()
                        + " l: " + leftSpeedController.get()
                        + " r: " + rightSpeedController.get());
                last = now;
            }
        }
    }

    private class SonarInput implements PIDSource {

        AnalogSonar sonar;

        public SonarInput(AnalogSonar s) {
            sonar = s;
        }

        public double pidGet() {
            return sonar.getDistance();
        }
    }

    private class SonarOutput implements PIDOutput {

        public void pidWrite(double output) {
            robotDrive21.tankDrive(output, output);
        }
    }
    PIDController wallPID;

    public void driveAlongWallStart() {
        double kp = .5;
        double ki = 0;
        double kd = .5;

        PIDController wallPID = new PIDController(kp, ki, kd, new SonarInput(leftSonar), new SonarOutput());
        wallPID.setOutputRange(-.5, 5);
        wallPID.setPercentTolerance(5);
        wallPID.enable();
        wallPID.setSetpoint(24);

        now = Timer.getFPGATimestamp();
        last = now;

        // while (pid.onTarget() == false) {
        while (Math.abs(wallPID.getError()) > 2) {
            now = Timer.getFPGATimestamp();
            if (now - last > 1) {
                System.out.println("In:" + leftSonar.getDistance()
                        + " Out:" + wallPID.get() + " Err:" + wallPID.getError());
                last = now;
            }
        }

    }

    public void driveAlongWallStop() {
        wallPID.disable();
        robotDrive21.tankDrive(0, 0);
    }

}
